(self.webpackChunkrojo_space=self.webpackChunkrojo_space||[]).push([[4129],{17502:function(e,t,n){"use strict";n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return u},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c}});var a=n(87462),i=n(63366),l=(n(67294),n(3905)),o=n(93456),r=["components"],s={sidebar_position:5},p="Sync Details",d={unversionedId:"sync-details",id:"version-v6/sync-details",title:"Sync Details",description:"This page aims to describe how Rojo turns files on the filesystem into Roblox objects.",source:"@site/versioned_docs/version-v6/sync-details.md",sourceDirName:".",slug:"/sync-details",permalink:"/docs/v6/sync-details",editUrl:"https://github.com/rojo-rbx/rojo.space/edit/master/versioned_docs/version-v6/sync-details.md",tags:[],version:"v6",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"version-v6/tutorialSidebar",previous:{title:"Project Format",permalink:"/docs/v6/project-format"},next:{title:"Recomended Workflows",permalink:"/docs/v6/workflows"}},m={},c=[{value:"Overview",id:"overview",level:2},{value:"Limitations",id:"limitations",level:2},{value:"Folders",id:"folders",level:2},{value:"Scripts",id:"scripts",level:2},{value:"Models",id:"models",level:2},{value:"Localization Tables",id:"localization-tables",level:2},{value:"Plain Text",id:"plain-text",level:2},{value:"JSON Modules",id:"json-modules",level:2},{value:"JSON Models",id:"json-models",level:2},{value:"Projects",id:"projects",level:2},{value:"Meta Files",id:"meta-files",level:2},{value:"Meta Files to set Rojo metadata",id:"meta-files-to-set-rojo-metadata",level:3},{value:"Meta Files for Disabled Scripts",id:"meta-files-for-disabled-scripts",level:3},{value:"Meta Files for Tools",id:"meta-files-for-tools",level:3}],k={toc:c};function u(e){var t=e.components,n=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"sync-details"},"Sync Details"),(0,l.kt)("p",null,"This page aims to describe how Rojo turns files on the filesystem into Roblox objects."),(0,l.kt)("h2",{id:"overview"},"Overview"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"left"},"Concept"),(0,l.kt)("th",{parentName:"tr",align:"left"},"File Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#folders"},"Folders")),(0,l.kt)("td",{parentName:"tr",align:"left"},"any directory")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Server ",(0,l.kt)("a",{parentName:"td",href:"#scripts"},"Scripts")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"*.server.lua"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Client ",(0,l.kt)("a",{parentName:"td",href:"#scripts"},"Scripts")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"*.client.lua"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Module ",(0,l.kt)("a",{parentName:"td",href:"#scripts"},"Scripts")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"*.lua"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"XML ",(0,l.kt)("a",{parentName:"td",href:"#models"},"Models")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"*.rbxmx"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},"Binary ",(0,l.kt)("a",{parentName:"td",href:"#models"},"Models")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"*.rbxm"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#localization-tables"},"Localization Tables")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"*.csv"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#plain-text"},"Plain Text")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"*.txt"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#json-modules"},"JSON Modules")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"*.json"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#json-models"},"JSON Models")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"*.model.json"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#projects"},"Projects")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"*.project.json"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("a",{parentName:"td",href:"#meta-files"},"Meta Files")),(0,l.kt)("td",{parentName:"tr",align:"left"},(0,l.kt)("inlineCode",{parentName:"td"},"*.meta.json"))))),(0,l.kt)("h2",{id:"limitations"},"Limitations"),(0,l.kt)("p",null,"Not all property types can be synced by Rojo in real-time due to limitations of the Roblox Studio plugin API. In these cases, you can usually generate a place file and open it when you start working on a project."),(0,l.kt)("p",null,"Some common cases you might hit are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Binary data (Terrain, CSG parts)"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"MeshPart.MeshId")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"HttpService.HttpEnabled"))),(0,l.kt)("p",null,"For a list of all property types that Rojo can reason about, both when live-syncing and when building place files, look at ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/Roblox/rbx-dom#property-type-coverage"},"rbx-dom's type coverage chart"),"."),(0,l.kt)("p",null,"This limitation may be solved by ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/rojo-rbx/rojo/issues/205"},"issue #205")," in the future."),(0,l.kt)("h2",{id:"folders"},"Folders"),(0,l.kt)("p",null,"Any directory on the filesystem will turn into a ",(0,l.kt)("inlineCode",{parentName:"p"},"Folder")," instance with the same name."),(0,l.kt)("p",null,"It is possible for a directory to contain certain files that change what the directory turns into:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"An ",(0,l.kt)("inlineCode",{parentName:"li"},"init.lua"),", ",(0,l.kt)("inlineCode",{parentName:"li"},"init.server.lua"),", or ",(0,l.kt)("inlineCode",{parentName:"li"},"init.client.lua")," file, described in ",(0,l.kt)("a",{parentName:"li",href:"#scripts"},"Scripts"),"."),(0,l.kt)("li",{parentName:"ul"},"An ",(0,l.kt)("inlineCode",{parentName:"li"},"init.meta.json")," file that defines ",(0,l.kt)("inlineCode",{parentName:"li"},"className"),", described in ",(0,l.kt)("a",{parentName:"li",href:"#meta-files"},"Meta Files"),"."),(0,l.kt)("li",{parentName:"ul"},"A ",(0,l.kt)("inlineCode",{parentName:"li"},"default.project.json")," file, described in ",(0,l.kt)("a",{parentName:"li",href:"#projects"},"Projects"),".")),(0,l.kt)("h2",{id:"scripts"},"Scripts"),(0,l.kt)("p",null,"Rojo transforms any files with the ",(0,l.kt)("inlineCode",{parentName:"p"},"lua")," extension into the various script instances that Roblox has."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Any file ending in ",(0,l.kt)("inlineCode",{parentName:"li"},".server.lua")," will turn into a ",(0,l.kt)("inlineCode",{parentName:"li"},"Script")," instance."),(0,l.kt)("li",{parentName:"ul"},"Any file ending in ",(0,l.kt)("inlineCode",{parentName:"li"},".client.lua")," will turn into a ",(0,l.kt)("inlineCode",{parentName:"li"},"LocalScript")," instance."),(0,l.kt)("li",{parentName:"ul"},"Any other ",(0,l.kt)("inlineCode",{parentName:"li"},".lua")," file will turn into a ",(0,l.kt)("inlineCode",{parentName:"li"},"ModuleScript")," instance.")),(0,l.kt)("p",null,"Rojo reserves three special script names. These scripts change their parent directory into a script instead of a folder:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"init.server.lua")," will change its parent directory into a ",(0,l.kt)("inlineCode",{parentName:"li"},"Script")," instance."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"init.client.lua")," will change its parent directory into a ",(0,l.kt)("inlineCode",{parentName:"li"},"LocalScript")," instance."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"init.lua")," will change its parent directory into a ",(0,l.kt)("inlineCode",{parentName:"li"},"ModuleScript")," instance.")),(0,l.kt)("p",null,"For example, these files:"),(0,l.kt)(o.Mermaid,{config:{},chart:"graph TD;\n  my_model(My Model/)\n  init(init.server.lua)\n  foo(foo.lua)\n\n  my_model --\x3e init\n  my_model --\x3e foo",mdxType:"Mermaid"}),(0,l.kt)("p",null,"Will turn into these instances in Roblox:"),(0,l.kt)(o.Mermaid,{chart:'graph TD;\n  my_model("My Model (Script)")\n  foo("Foo (Script)")\n\n  my_model --\x3e foo',mdxType:"Mermaid"}),(0,l.kt)("p",null,'Only one "init script" can be present in the same folder.'),(0,l.kt)("h2",{id:"models"},"Models"),(0,l.kt)("p",null,"Rojo supports both binary (",(0,l.kt)("inlineCode",{parentName:"p"},".rbxm"),") and XML (",(0,l.kt)("inlineCode",{parentName:"p"},".rbxmx"),") models generated by Roblox Studio or another tool."),(0,l.kt)("p",null,"Support for ",(0,l.kt)("inlineCode",{parentName:"p"},"rbxmx")," is very good, while support for ",(0,l.kt)("inlineCode",{parentName:"p"},"rbxm")," is still very early, buggy, and lacking features."),(0,l.kt)("p",null,"For a rundown of supported types, check out ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/rojo-rbx/rbx-dom#property-type-coverage"},"rbx-dom's type coverage chart"),"."),(0,l.kt)("h2",{id:"localization-tables"},"Localization Tables"),(0,l.kt)("p",null,"Any file with the ",(0,l.kt)("inlineCode",{parentName:"p"},"csv")," extension is transformed into a ",(0,l.kt)("inlineCode",{parentName:"p"},"LocalizationTable")," instance. Rojo expects these files to follow the same format that Roblox does when importing and exporting localization information."),(0,l.kt)("p",null,"An example CSV localization table is:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-csv"},"Key,Source,Context,Example,es\nAck,Ack!,,An exclamation of despair,\xa1Ay!\n")),(0,l.kt)("h2",{id:"plain-text"},"Plain Text"),(0,l.kt)("p",null,"Any file with the ",(0,l.kt)("inlineCode",{parentName:"p"},"txt")," extension is transformed into a ",(0,l.kt)("inlineCode",{parentName:"p"},"StringValue")," instance. This is useful for bringing in text data that can be read by scripts at runtime."),(0,l.kt)("h2",{id:"json-modules"},"JSON Modules"),(0,l.kt)("p",null,"Any file with the ",(0,l.kt)("inlineCode",{parentName:"p"},"json")," extension that is not a ",(0,l.kt)("a",{parentName:"p",href:"#json-models"},"JSON Model")," or a ",(0,l.kt)("a",{parentName:"p",href:"#project-file"},"Project File")),(0,l.kt)("h2",{id:"json-models"},"JSON Models"),(0,l.kt)("p",null,"Files ending in ",(0,l.kt)("inlineCode",{parentName:"p"},".model.json")," can be used to describe simple models. They're designed to be hand-written and are useful for instances like ",(0,l.kt)("inlineCode",{parentName:"p"},"RemoteEvent"),"."),(0,l.kt)("p",null,"A JSON model describing a folder containing a ",(0,l.kt)("inlineCode",{parentName:"p"},"Part")," and a ",(0,l.kt)("inlineCode",{parentName:"p"},"RemoteEvent")," could be written as a file named ",(0,l.kt)("inlineCode",{parentName:"p"},"My Cool Model.model.json")," with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "ClassName": "Folder",\n  "Children": [\n    {\n      "Name": "RootPart",\n      "ClassName": "Part",\n      "Properties": {\n        "Size": {\n          "Type": "Vector3",\n          "Value": [4, 4, 4]\n        }\n      }\n    },\n    {\n      "Name": "SendMoney",\n      "ClassName": "RemoteEvent"\n    }\n  ]\n}\n')),(0,l.kt)("p",null,"It would turn into these instances:"),(0,l.kt)(o.Mermaid,{chart:'graph TD;\n  parent("My Cool Model (Folder)")\n  part("RootPart (Part)")\n  remote("SendMoney (RemoteEvent)")\n\n  parent --\x3e part\n  parent --\x3e remote',mdxType:"Mermaid"}),(0,l.kt)("h2",{id:"projects"},"Projects"),(0,l.kt)("p",null,"Starting in Rojo 6.0, project files can be included in other project files. This can be useful for reusing pieces between multiple project files."),(0,l.kt)("p",null,"Projects that are intended to be included inside other projects should describe models, not places."),(0,l.kt)("p",null,"If a directory contains a file named ",(0,l.kt)("inlineCode",{parentName:"p"},"default.project.json"),", Rojo will use the contents of the project file instead of anything else in the directory."),(0,l.kt)("h2",{id:"meta-files"},"Meta Files"),(0,l.kt)("p",null,"New in Rojo 0.5 are meta files, named ",(0,l.kt)("inlineCode",{parentName:"p"},".meta.json"),"."),(0,l.kt)("p",null,"Meta files allow attaching extra Rojo data to models defined in other formats, like Roblox's ",(0,l.kt)("inlineCode",{parentName:"p"},"rbxm")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"rbxmx")," model formats, or even Lua scripts."),(0,l.kt)("p",null,"This can be used to set Rojo-specific settings like ",(0,l.kt)("inlineCode",{parentName:"p"},"ignoreUnknownInstances"),", or can be used to set properties like ",(0,l.kt)("inlineCode",{parentName:"p"},"Disabled")," on a script."),(0,l.kt)("p",null,"Meta files can contain:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"className"),": Changes the ",(0,l.kt)("inlineCode",{parentName:"li"},"className")," of a containing ",(0,l.kt)("inlineCode",{parentName:"li"},"Folder")," into something else.",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Usable only in ",(0,l.kt)("inlineCode",{parentName:"li"},"init.meta.json")," files"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"properties"),": A map of properties to set on the instance, just like projects",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},"Usable on anything except ",(0,l.kt)("inlineCode",{parentName:"li"},".rbxmx"),", ",(0,l.kt)("inlineCode",{parentName:"li"},".rbxm"),", and ",(0,l.kt)("inlineCode",{parentName:"li"},".model.json")," files, which already have properties"))),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"ignoreUnknownInstances"),": Works just like ",(0,l.kt)("inlineCode",{parentName:"li"},"$ignoreUnknownInstances")," in project files")),(0,l.kt)("h3",{id:"meta-files-to-set-rojo-metadata"},"Meta Files to set Rojo metadata"),(0,l.kt)("p",null,"Sometimes it's useful to apply properties like ",(0,l.kt)("inlineCode",{parentName:"p"},"ignoreUnknownInstances")," on instances that are defined on the filesystem instead of within the project itself."),(0,l.kt)("p",null,"If your project has ",(0,l.kt)("inlineCode",{parentName:"p"},"hello.txt")," and there are instances underneath it that you want Rojo to ignore when live-syncing, you could create ",(0,l.kt)("inlineCode",{parentName:"p"},"hello.meta.json")," with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "ignoreUnknownInstances": true\n}\n')),(0,l.kt)("h3",{id:"meta-files-for-disabled-scripts"},"Meta Files for Disabled Scripts"),(0,l.kt)("p",null,"Meta files can be used to set properties on ",(0,l.kt)("inlineCode",{parentName:"p"},"Script")," instances, like ",(0,l.kt)("inlineCode",{parentName:"p"},"Disabled"),"."),(0,l.kt)("p",null,"If your project has ",(0,l.kt)("inlineCode",{parentName:"p"},"foo.server.lua")," and you want to make sure it would be disabled, you could create a ",(0,l.kt)("inlineCode",{parentName:"p"},"foo.meta.json")," next to it with:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "properties": {\n    "Disabled": true\n  }\n}\n')),(0,l.kt)("h3",{id:"meta-files-for-tools"},"Meta Files for Tools"),(0,l.kt)("p",null,"If you wanted to represent a tool containing a script and a model for its handle, create a directory with an ",(0,l.kt)("inlineCode",{parentName:"p"},"init.meta.json")," file in it:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "className": "Tool",\n  "properties": {\n    "Grip": [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1]\n  }\n}\n')),(0,l.kt)("p",null,"Instead of a ",(0,l.kt)("inlineCode",{parentName:"p"},"Folder")," instance, you'll end up with a ",(0,l.kt)("inlineCode",{parentName:"p"},"Tool")," instance with the ",(0,l.kt)("inlineCode",{parentName:"p"},"Grip")," property set."))}u.isMDXComponent=!0},11748:function(e,t,n){var a={"./locale":89234,"./locale.js":89234};function i(e){var t=l(e);return n(t)}function l(e){if(!n.o(a,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return a[e]}i.keys=function(){return Object.keys(a)},i.resolve=l,e.exports=i,i.id=11748}}]);